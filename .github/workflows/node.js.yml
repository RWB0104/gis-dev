# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: OpenLayers Sandbox CI

on:
  push:
    tags:
      - v*
    branches: [ "release" ]

  pull_request:
    branches: [ "release" ]

jobs:
  set-dependencies:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: .yarn
          key: ${{ runner.os }}-node-gis-dev-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-gis-dev-jader

      - name: Jader Dependencies Install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

  deploy:
    needs: set-dependencies
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .yarn
          key: ${{ runner.os }}-node-gis-dev-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-gis-dev-jader

      - name: Build
        run: yarn build

      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: release # The branch name where you want to push the assets
          FOLDER: out # The directory where your assets are generated
          TARGET_DIR: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
          MESSAGE: "ðŸš€ Publish gis-dev" # The commit message
